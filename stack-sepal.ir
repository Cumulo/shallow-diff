{:package "shallow-diff",
 :files {"diff" {:ns ["ns" "shallow-diff.diff"],
                 :defs {"diff-values" ["defn"
                                       "diff-values"
                                       ["x" "y" "coord" "collect!"]
                                       ["cond"
                                        [["identical?" "x" "y"] ["[]"]]
                                        [["and" ["=type?" "x" "y"] ["set?" "x"]]
                                         ["diff-set" "x" "y" "coord" "collect!"]]
                                        [["and" ["=type?" "x" "y"] ["vector?" "x"]]
                                         ["diff-vector" "x" "y" "coord" "collect!"]]
                                        [["and" ["=type?" "x" "y"] ["map?" "x"]]
                                         ["diff-map" "x" "y" "coord" "collect!"]]
                                        [":else" ["collect!" ["[]" "coord" ["[]" ":set!" "y"]]]]]],
                        "diff-set" ["defn"
                                    "diff-set"
                                    ["xs" "ys" "coord" "collect!"]
                                    ["let"
                                     [["all-keys" ["into" ["hash-set"] ["concat" "xs" "ys"]]]]
                                     ["doseq"
                                      ["[]" "cursor" "all-keys"]
                                      ["let"
                                       [["exists?" ["contains?" "ys" "cursor"]]
                                        ["existed?" ["contains?" "xs" "cursor"]]]
                                       ["cond"
                                        [["and" "exists?" "existed?"] "nil"]
                                        [["and" "exists?" ["not" "existed?"]]
                                         ["collect!" ["[]" "coord" ["[]" ":include" "cursor"]]]]
                                        [["and" ["not" "exists?"] "existed?"]
                                         ["collect!" ["[]" "coord" ["[]" ":exclude" "cursor"]]]]
                                        [":else" "nil"]]]]
                                     "nil"]],
                        "diff-map" ["defn"
                                    "diff-map"
                                    ["xs" "ys" "coord" "collect!"]
                                    ["let"
                                     [["all-keys" ["into" ["hash-set"] ["concat" ["keys" "xs"] ["keys" "ys"]]]]]
                                     ["doseq"
                                      ["[]" "cursor" "all-keys"]
                                      ["let"
                                       [["x" ["get" "xs" "cursor"]] ["y" ["get" "ys" "cursor"]]]
                                       ["cond"
                                        [["identical?" "x" "y"] "nil"]
                                        [["and" ["some?" "x"] ["nil?" "y"]]
                                         ["collect!" ["[]" "coord" ["[]" ":drop" "cursor"]]]]
                                        [["and" ["nil?" "x"] ["some?" "y"]]
                                         ["collect!" ["[]" "coord" ["[]" ":add" "cursor" "y"]]]]
                                        [":else" ["diff-values" "x" "y" ["conj" "coord" "cursor"] "collect!"]]]]]
                                     "nil"]],
                        "diff" ["defn"
                                "diff"
                                ["x" "y"]
                                ["let"
                                 [["ref-changes" ["atom" ["[]"]]]
                                  ["collect!" ["fn" ["x"] ["swap!" "ref-changes" "conj" "x"]]]]
                                 ["diff-values" "x" "y" ["[]"] "collect!"]
                                 "@ref-changes"]],
                        "reduce-vector" ["defn"
                                         "reduce-vector"
                                         ["collect!" "counter" "xs" "ys" "coord"]
                                         ["cond"
                                          [["and" ["empty?" "xs"] ["empty?" "ys"]] "nil"]
                                          [["and" ["empty?" "xs"] ["not" ["empty?" "ys"]]]
                                           ["let"
                                            [["cursor" ["first" "ys"]]]
                                            ["collect!" ["[]" "coord" ["[]" ":append" "cursor"]]]
                                            ["recur" "collect!" ["inc" "counter"] "xs" ["subvec" "ys" "1"] "coord"]]]
                                          [["and" ["not" ["empty?" "xs"]] ["empty?" "ys"]]
                                           ["do"
                                            ["collect!" ["[]" "coord" ["[]" ":remove" "counter"]]]
                                            ["recur" "collect!" "counter" ["subvec" "xs" "1"] "ys" "coord"]]]
                                          [":else"
                                           ["let"
                                            [["x1" ["first" "xs"]]
                                             ["y1" ["first" "ys"]]
                                             ["x1-remains?" ["shallow-contains?" ["subvec" "ys" "1"] "x1"]]
                                             ["y1-existed?" ["shallow-contains?" ["subvec" "xs" "1"] "y1"]]]
                                            ["cond"
                                             [["=" "x1" "y1"]
                                              ["recur"
                                               "collect!"
                                               ["inc" "counter"]
                                               ["subvec" "xs" "1"]
                                               ["subvec" "ys" "1"]
                                               "coord"]]
                                             [["and" "x1-remains?" ["not" "y1-existed?"]]
                                              ["do"
                                               ["collect!" ["[]" "coord" ["[]" ":insert" "counter" "y1"]]]
                                               ["recur" "collect!" ["inc" "counter"] "xs" ["subvec" "ys" "1"] "coord"]]]
                                             [["and" ["not" "x1-remains?"] "y1-existed?"]
                                              ["do"
                                               ["collect!" ["[]" "coord" ["[]" ":remove" "counter"]]]
                                               ["recur" "collect!" "counter" ["subvec" "xs" "1"] "ys" "coord"]]]
                                             [["and" ["not" "x1-remains?"] ["not" "y1-existed?"]]
                                              ["do"
                                               ["diff-values" "x1" "y1" ["conj" "coord" "counter"] "collect!"]
                                               ["recur"
                                                "collect!"
                                                ["inc" "counter"]
                                                ["subvec" "xs" "1"]
                                                ["subvec" "ys" "1"]
                                                "coord"]]]
                                             [":else"
                                              ["let"
                                               [["xi" ["shallow-index-of" ["subvec" "ys" "1"] "x1"]]
                                                ["yi" ["shallow-index-of" ["subvec" "xs" "1"] "y1"]]]
                                               ["if"
                                                ["<=" "xi" "yi"]
                                                ["do"
                                                 ["collect!" ["[]" "coord" ["[]" ":insert" "counter" "y1"]]]
                                                 ["recur" "collect!" ["inc" "counter"] "xs" ["subvec" "ys" "1"] "coord"]]
                                                ["do"
                                                 ["collect!" ["[]" "coord" ["[]" ":remove" "counter"]]]
                                                 ["recur" "collect!" "counter" ["subvec" "xs" "1"] "ys" "coord"]]]]]]]]]],
                        "diff-vector" ["defn"
                                       "diff-vector"
                                       ["xs" "ys" "coord" "collect!"]
                                       ["reduce-vector" "collect!" "0" "xs" "ys" "coord"]],
                        "=type?" ["defn" "=type?" ["x" "y"] ["=" ["type" "x"] ["type" "y"]]],
                        "shallow-index-of" ["defn"
                                            "shallow-index-of"
                                            [["xs" "x"] ["shallow-index-of" "0" "xs" "x"]]
                                            [["counter" "xs" "x"]
                                             ["cond"
                                              [["=" ["count" "xs"] "0"] "nil"]
                                              [["=" ["first" "xs"] "x"] "counter"]
                                              [":else" ["recur" ["inc" "counter"] ["rest" "xs"] "x"]]]]],
                        "shallow-contains?" ["defn"
                                             "shallow-contains?"
                                             ["xs" "x"]
                                             ["if"
                                              ["=" ["count" "xs"] "0"]
                                              "false"
                                              ["if"
                                               ["identical?" ["first" "xs"] "x"]
                                               "true"
                                               ["recur" ["rest" "xs"] "x"]]]]},
                 :procs [["declare" "diff"]]},
         "patch" {:ns ["ns" "shallow-diff.patch"],
                  :defs {"decide-op" ["defn"
                                      "decide-op"
                                      ["acc" "operation"]
                                      ["let"
                                       [["coord" ["first" "operation"]]
                                        ["detail" ["last" "operation"]]
                                        ["op" ["first" "detail"]]
                                        ["args" ["rest" "detail"]]
                                        ["a1" ["first" "args"]]
                                        ["a2" ["first" ["rest" "args"]]]]
                                       ["let"
                                        [["method"
                                          ["fn"
                                           ["cursor"]
                                           ["case"
                                            "op"
                                            [":set!" "a1"]
                                            [":add" ["assoc" "cursor" "a1" "a2"]]
                                            [":drop" ["dissoc" "cursor" "a1"]]
                                            [":insert"
                                             ["into"
                                              ["[]"]
                                              ["concat"
                                               ["conj" ["subvec" "cursor" "0" "a1"] "a2"]
                                               ["subvec" "cursor" "a1"]]]]
                                            [":remove"
                                             ["into"
                                              ["[]"]
                                              ["concat" ["subvec" "cursor" "0" "a1"] ["subvec" "cursor" ["inc" "a1"]]]]]
                                            [":append" ["conj" "cursor" "a1"]]
                                            [":include" ["conj" "cursor" "a1"]]
                                            [":exclude" ["disj" "cursor" "a1"]]
                                            "acc"]]]]
                                        ["if"
                                         ["=" "coord" ["[]"]]
                                         ["method" "acc"]
                                         ["update-in" "acc" "coord" "method"]]]]],
                         "patch" ["defn" "patch" ["x" "changes"] ["reduce" "decide-op" "x" "changes"]]},
                  :procs []},
         "comp.container" {:ns ["ns"
                                "shallow-diff.comp.container"
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]]],
                           :defs {"render" ["defn"
                                            "render"
                                            ["store"]
                                            ["fn"
                                             ["state" "mutate"]
                                             ["div" ["{}"] ["span" ["{}" ":attrs" ["{}" ":inner-text" "|Container"]]]]]],
                                  "comp-container" ["def" "comp-container" ["create-comp" ":container" "render"]]},
                           :procs []},
         "main" {:ns ["ns"
                      "shallow-diff.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "gc-states!"]]
                       ["[]" "shallow-diff.comp.container" ":refer" ["[]" "comp-container"]]]],
                 :defs {"-main" ["defn"
                                 "-main"
                                 []
                                 ["enable-console-print!"]
                                 ["render-app!"]
                                 ["add-watch" "store-ref" ":gc" ["fn" [] ["gc-states!" "states-ref"]]]
                                 ["add-watch" "store-ref" ":changes" "render-app!"]
                                 ["add-watch" "states-ref" ":changes" "render-app!"]
                                 ["println" "|app started!"]],
                        "store-ref" ["defonce" "store-ref" ["atom" "0"]],
                        "dispatch" ["defn" "dispatch" ["op" "op-data"]],
                        "states-ref" ["defonce" "states-ref" ["atom" ["{}"]]],
                        "on-jsload!" ["defn"
                                      "on-jsload!"
                                      []
                                      ["clear-cache!"]
                                      ["render-app!"]
                                      ["println" "|code updated."]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       []
                                       ["let"
                                        [["target" [".querySelector" "js/document" "|#app"]]]
                                        ["render!" ["comp-container" "@store-ref"] "target" "dispatch" "states-ref"]]]},
                 :procs [["set!" "js/window.onload" "-main"]]}}}
